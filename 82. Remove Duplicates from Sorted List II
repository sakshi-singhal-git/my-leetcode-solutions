/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
#include<climits>
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        int same = INT_MAX;
        ListNode* temp = head, *newList = NULL, *newListhead = NULL;    
        //
        if(head == NULL || head->next == NULL)
            return head;
        
        while(temp->next!= NULL){
            if(temp->val != temp->next->val){
                if(temp->val == same)
                {
                    temp = temp->next;
                    continue;
                }
                    
                if(newList == NULL){
                    newList = temp;
                    newListhead = temp;
                }
                else{
                    newList->next = temp;
                    newList = newList->next;
                } 
                temp = temp->next;
                newList->next = NULL;
            }
            else //both the values are same
            {
                if(same == INT_MAX){
                    same = temp->val;   
                }
                else if(temp->val != same)
                    same = temp->val;
                temp = temp->next;
            }
        }
        if(temp->val != same)
        {
            if(newList == NULL){
                newList = newListhead = temp;
            }
                
            else
                newList->next = temp;
        }
            
        return newListhead;
    }
};
