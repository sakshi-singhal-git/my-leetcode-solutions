class Solution {
public:
    
    bool dfs(vector<vector<char>>&board, int n, int m, int i, int j, vector<vector<int>>& visited,string word)
    {
        if(word.length() == 0)
            return true;
        if(i<0 || i>=n || j<0 || j>=m || visited[i][j] || board[i][j] != word[0])
            return false;
        visited[i][j] = 1;
        bool ans = dfs(board,n,m,i+1,j,visited,word.substr(1)) ||
                    dfs(board,n,m,i-1,j,visited,word.substr(1)) ||
                    dfs(board,n,m,i,j+1,visited,word.substr(1)) ||
                    dfs(board,n,m,i,j-1,visited,word.substr(1));
        visited[i][j] = 0;
        return ans;
    }
    
    
    bool exist(vector<vector<char>>& board, string word) {
        int n = board.size();
        int m = board[0].size();
        vector<vector<int>> visited(n,vector<int>(m,0));
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(board[i][j] == word[0])
                    if(dfs(board,n,m,i,j,visited,word))
                        return true;
            }
        }
        return false;
        
    }
};
