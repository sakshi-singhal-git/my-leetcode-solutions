/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode *head1 = l1, *head2 = l2, *newList = NULL,*newListhead= NULL;
        if(head1 == NULL)   return head2;
        if(head2 == NULL)   return head1;
        
        while(head1!= NULL && head2 != NULL){
            if(head1->val <= head2->val){
                if(newList == NULL){
                    newList = head1;
                    newListhead = head1;
                }
                else{
                    newList->next = head1;
                    newList = newList->next;
                }
                head1 = head1->next;
                newList->next = NULL;
            }
            else{
                if(newList == NULL){
                    newList = head2;
                    newListhead = head2;
                }
                else{
                    newList->next = head2;
                    newList = newList->next;
                }
                head2 = head2->next;
                newList->next = NULL;
            }
        }
        if(head1!= NULL){
            newList->next = head1;
        }
        else if(head2!= NULL)
        {
            newList->next = head2;
        }
        return newListhead;
    }
};
