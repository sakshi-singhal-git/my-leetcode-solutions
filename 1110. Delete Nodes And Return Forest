/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {
        //TC: O(n) traversing all nodes , SC  = O(n) stack space because set space will be equal to size of to_delete which will be <= number of tree nodes.
        
        vector<TreeNode*> ans;
        set<int> s;
        
        for(int i=0;i<to_delete.size();i++)
            s.insert(to_delete[i]);
        
        TreeNode* dummy = deli(root,s,ans);
        if(dummy!= NULL)
            ans.push_back(dummy);
        return ans;
    }
    TreeNode* deli(TreeNode* root, set<int> s, vector<TreeNode*> &ans)
    {
        if(!root) return NULL;
        
        root->left = deli(root->left,s,ans);
        root->right = deli(root->right,s,ans);
        
        if(s.find(root->val) != s.end())
        {
            if(!root->left && !root->right)
                return NULL;
            else{
                if(root->left)
                    ans.push_back(root->left);
                if(root->right)
                    ans.push_back(root->right);
                return NULL;
            }
        }
        return root;
    }
};
