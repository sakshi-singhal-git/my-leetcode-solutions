class Solution {
public:
    int merge(vector<int>&nums, int low, int mid, int high)
    {
        int i=low,count = 0;
        for(int j=mid+1;j<=high;j++)
        {
            while(i<=mid && nums[i]<=(long)2*nums[j] )
                i++;
            if(i>mid)
                break;
            count+=(mid-i+1);
        }
        
        vector<int> temp;
        i=low;
        int j = mid+1;
        while(i<=mid && j<=high)
        {
            if(nums[i]<= nums[j])
                temp.push_back(nums[i++]);
            else
                temp.push_back(nums[j++]);
        }
        while(i<=mid)
            temp.push_back(nums[i++]);
        while(j<=high)
            temp.push_back(nums[j++]);
        
        for(int i=low;i<=high;i++)
            nums[i] = temp[i-low];
        return count;
    }
    
    int mergeSort(vector<int>& nums, int low, int high)
    {
        int inv = 0;
        if(low<high)
        {
            int mid = low+(high-low)/2;
            inv+=mergeSort(nums,low,mid);
            inv+=mergeSort(nums,mid+1,high);
            inv+=merge(nums,low,mid,high);
        }
        return inv;
    }
    int reversePairs(vector<int>& nums) {
        return mergeSort(nums,0,nums.size()-1);
    }
};
