class TrieNode
{
    public:
    char data;
    TrieNode** children;
    bool isTerminal;
    TrieNode(char d)
    {
        this->data = d;
        this->children = new TrieNode*[26];
        for(int i=0;i<26;i++)
            this->children[i] = NULL;
        this->isTerminal =  false;
    }
};

class WordDictionary {
public:
    /** Initialize your data structure here. */
    TrieNode* root;
    WordDictionary() {
        root = new TrieNode('\0');
    }
    void add(TrieNode* root, string word)
    {
        if(word.size() ==0)
        {
            root->isTerminal = true;
            return;
        }
            
        if(root->children[word[0]-'a'] == NULL)
        {
            TrieNode* child = new TrieNode(word[0]);
            root->children[word[0]-'a'] = child;
        }
        add(root->children[word[0]-'a'],word.substr(1));
    }
    
    
    void addWord(string word) {
        add(root,word);
    }
    
    bool sea(TrieNode* root, string word)
    {
        if(word.size() == 0)
            return root->isTerminal;
        if(word[0] == '.')
        {
            for(int i=0;i<26;i++)
            {
                if(root->children[i] != NULL)
                    if(sea(root->children[i], word.substr(1)))
                        return true;
            }
        }
        else
        {
            if(root->children[word[0] -'a']!= NULL)
                if(sea(root->children[word[0]-'a'] , word.substr(1)))
                    return true;
        }
        return false;
    }
    bool search(string word) {
        return sea(root,word);
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */
