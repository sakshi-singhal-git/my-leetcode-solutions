class Solution {
public:
    int getfirst(vector<int> &nums, int target)
    {
        int low = 0;
        int high = nums.size()-1;
        while(low<=high)
        {
            int mid=  low+(high-low)/2;
            if(nums[mid] == target)
            {
                if(mid-1>=0 && nums[mid] == nums[mid-1])
                    high = mid-1;
                else
                    return mid;
            }
            else if(nums[mid]< target)
                low = mid+1;
            else
                high = mid-1;
        }
        return -1;
    }
    int getlast(vector<int> &nums, int target)
    {
        int low = 0;
        int high = nums.size()-1;
        while(low<=high)
        {
            int mid=  low+(high-low)/2;
            if(nums[mid] == target)
            {
                if(mid+1<=high && nums[mid] == nums[mid+1])
                    low = mid+1;
                else
                    return mid;
            }
            else if(nums[mid]< target)
                low = mid+1;
            else
                high = mid-1;
        }
        return -1;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans;
        ans.push_back(getfirst(nums,target));
        ans.push_back(getlast(nums,target));
        return ans;
    }
};
