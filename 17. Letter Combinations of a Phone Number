class Solution {
public:
    void call(string digits,vector<string> &ans, int currentPos,string str,unordered_map<char,string> mp)
    {
        if(str.length() == digits.length())
        {
            ans.push_back(str);
            return;
        }
        string sequence = mp[digits[currentPos]];
        for(int i=0;i<sequence.length();i++)
        {
            str+=sequence[i];
            call(digits,ans,currentPos+1,str,mp);
            str.pop_back();
        }
    }
    
    vector<string> letterCombinations(string digits) {
        //look for iterative solution on gfg
        vector<string> ans;
        if(digits.length() == 0)
            return ans;
        
        unordered_map<char,string> mp;
        mp['2'] = "abc";
        mp['3'] = "def";
        mp['4'] = "ghi";
        mp['5'] = "jkl";
        mp['6'] = "mno";
        mp['7'] = "pqrs";
        mp['8'] = "tuv";
        mp['9'] = "wxyz";
        string str;
        call(digits,ans,0,str,mp);
        return ans;
    }
};
